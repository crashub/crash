There are several ways to run CRaSH, as a standalone application it controls its own JVM or as an embedded
service in an existing runtime like a web application or a Spring application.

= Standalone =

== Standalone mode ==

The standalone mode allows you to run CRaSH from the command line directly. It provides the same functionality as the
war deployment but does not require a web container as it runs its own virtual machine. The __crash__ directory
in the application contains the standalone distribution.

The bin directory ///crash/bin// can be added to the system path, it contains the //crash.sh// script that will start
the standalone mode, for instance you can set it up this way:

{{screen}}
> export PATH=/.../crash/bin:$PATH
> crash.sh
   ______
 .~      ~. |`````````,       .'.                   ..'''' |         |
|           |'''|'''''      .''```.              .''       |_________|
|           |    `.       .'       `.         ..'          |         |
 `.______.' |      `.   .'           `. ....''             |         | 1.0.0-cr2-SNAPSHOT

Follow and support the project on http://vietj.github.com/crash
Welcome to jerry + !
It is Thu Apr 12 21:19:35 CEST 2012 now
{{/screen}}

Let's review quickly what you can find in standalone crash:

* The //bin// directory contains the //crash.sh// script and the standalone crash jar file
* The //conf// directory contains the configuration properties //crash.properties// and JVM logging configuration //logging.properties//
* The //cmd// directory contains the commands that will be available in crash by default it contains a few example commands
* The //lib// directory contains the various libraries used by crash, you should place additional jar files there

== Attach mode ==

The attach mode allows you to attach CRaSH to a JVM located on the same host with the attach API provided by the Hotspot
JVM. It works thanks to the standalone mode, the main difference is when you run the command line you can specify a
process id of a JVM and CRaSH will hook into the targetted JVM, let's see quickly an example of how to use it

{{screen}}
> jps
3165 RemoteMavenServer
20650 Test
20651 Jps

> crash.sh 20650
   ______
 .~      ~. |`````````,       .'.                   ..'''' |         |
|           |'''|'''''      .''```.              .''       |_________|
|           |    `.       .'       `.         ..'          |         |
 `.______.' |      `.   .'           `. ....''             |         | 1.0.0-cr2-SNAPSHOT

Follow and support the project on http://vietj.github.com/crash
Welcome to jerry + !
It is Thu Apr 12 22:09:23 CEST 2012 now
%
{{/screen}}

In this example we attached crash to the Test JVM. We obtained the Test JVM PID thanks to the //jps// command that belongs
to the Java Platform. During this mode the commands are executed in the target JVM.

= Embedded mode =

== Embedding in a web app ==

CRaSH can use a standard web archive to be deployed in a web container. The war file is used for its packaging capabilities
and triggering the CRaSH life cycle start/stop. In this mode CRaSH has two packaging available:

* A __core__ war file found under //deploy/core/crash.war// provides the base CRaSH functionnalities
* A __gatein__ war file found under //deploy/gatein/crash.war// provides additional Java Content Repository (JCR)
 features but deploys only in a GateIn server (Tomcat or JBoss). It extends the core packaging and adds
** JCR browsing and interactions
** SCP support for JCR import and export

You have to copy the //crash.war// in the appropriate server, regardless of the packaging used.

If you want you can embed CRaSH in your own //web.xml// configuration:

{{example title="Embedding CRaSH in a web application"}}
{{xml}}
<web-app>
  <listener>
    <listener-class>org.crsh.plugin.WebPluginLifeCycle</listener-class>
  </listener>
</web-app>
{{/xml}}
{{/example}}

== Embedding in Spring ==

CRaSH can be easily embedded and configured in a Spring configuration

=== Embedding as a Spring bean ===

Here is an example of embedding crash:

{{example title="Embedding CRaSH in Spring"}}
{{xml}}
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

	<bean class="org.crsh.spring.SpringBootstrap">
    <property name="config">
      <props>
        <!-- VFS configuration -->
        <prop key="crash.vfs.refresh_period">1</prop>

        <!-- SSH configuration -->
       <prop key="crash.ssh.port">2000</prop>

        <!-- Telnet configuration -->
        <prop key="crash.telnet.port">5000</prop>

        <!-- Authentication configuration -->
        <prop key="crash.auth">simple</prop>
        <prop key="crash.auth.simple.username">admin</prop>
        <prop key="crash.auth.simple.password">admin</prop>
      </props>
    </property>
	</bean>

</beans>
{{/xml}}
{{/example}}

The configuration properties are set as properties with the //config// property of the ##SpringBootstrap## bean.

Any Spring managed beans that extend ##org.crsh.plugin.CRaSHPlugin## will be automatically
registered as plugins in addition to those declared in ##META-INF/services/org.crsh.plugin.CRaSHPlugin##.

For example, the following implements a CRaSH authentication plugin that uses a JDBC DataSource 
managed by Spring:

{{example title="Spring managed authentication plugin"}}
{{java}}
package example;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import javax.sql.DataSource;

import org.crsh.auth.AuthenticationPlugin;
import org.crsh.plugin.CRaSHPlugin;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component("dbCrshAuth")
public class DbCrshAuthPlugin extends CRaSHPlugin<AuthenticationPlugin>
        implements AuthenticationPlugin {

    @Autowired
    private DataSource dataSource;

    @Override
    public AuthenticationPlugin getImplementation() {
        return this;
    }

    @Override
    public boolean authenticate(String username, String password)
            throws Exception {
        Connection conn = dataSource.getConnection();
        
        PreparedStatement statement = conn
                .prepareStatement("SELECT COUNT(*) FROM users WHERE username = ? AND password = ?");
        statement.setString(1, username);
        statement.setString(2, password);
        
        ResultSet rs = statement.executeQuery();
        return rs.getInt(1) >= 1;
    }

    @Override
    public String getName() {
        return "dbCrshAuth";
    }
    
    public void setDataSource(DataSource dataSource) {
        this.dataSource = dataSource;
    }
}
{{/java}}
{{/example}}

The above code uses Spring annotation driven beans, but this works the same with beans configured 
in XML:

{{example title="Custom authentication bean in spring.xml"}}
{{xml}}
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

    <bean class="example.DbCrshAuthPlugin">
        <property name="dataSource" ref="dataSource"/>
    </bean>

</beans>
{{/xml}}
{{/example}}

=== Embedding in a Spring web app ===

In case you are embedding CRaSH in a Spring application running with a servlet container, the bean
 ##org.crsh.spring.SpringWebBootstrap## can be used instead of ##org.crsh.spring.SpringBootstrap##. The ##SpringWebBootstrap##
 extends the ##SpringBootstrap## class and adds the //WEB-INF/crash// directory to the command path.

An example packaging comes with the CRaSH distribution, a __spring__ war file found under //deploy/spring/crash.war// provides
the base CRaSH functionnalities bootstrapped by the Spring Framework. It can be used as an example for embedding CRaSH
 in Spring.

This example is bundled with a //spring// command that shows how the Spring factory or beans can be accessed within
a CRaSH command.

== Embedding in a Guice web app ==

In order to embed CRaSH in a Guice web app, the only thing to do is install the ##org.crsh.guice.CrashGuiceSupport## module in it.

{{example title="Add CrashGuiceSupport to your Guice Application"}}
{{java}}

public class MyGuiceApplication extends ServletModule {
	
	@Override
	protected void configureServlets() {
		super.configureServlets();
		install(new CrashGuiceSupport(ImmutableMap.<PropertyDescriptor<Object>, Object>of()));
		serve("/").with(MyServlet.class);
	}
}
{{/java}}
{{/example}}

