= Developping commands =

A CRaSH command is written in the [[Groovy>>http://groovy.codehaus.org/]] language. The Groovy language provides
several signifiant advantages:

* Commands can be bare scripts or can be a class
* Java developers can write Groovy commands without learning it
* Groovy is dynamic and expressive

Each command has a corresponding Groovy file that contains a command class that will be invoked by the shell.
The files are located in
* //cmd// directory for the standalone distribution
* ///WEB-INF/crash/commands// directory for the web archive deployment

New commands can directly be placed in the commands directory; however they can also be placed in a sub directory of the
command directory, which is useful to group commands of the same kind.

In addition of that there are two special files called //login.groovy// and //logout.groovy// that are executed upon login
and logout of a user. They are useful to setup and cleanup things related to the current user session.

== Commands as a script ==

The simplest command can be a simple script that returns a string

{{code}}
return "Hello World";
{{/code}}

It is possible to use also the ##out## implicit variable to send a message to the console:

{{code}}
out.println("Hello World");
{{/code}}

== Commands as a class ==

Class can also be used to defined a command, it provides significant advantages over scripts:

* Commands can declare options and arguments for the command
* Commands can use annotations to describe the command behavior and parameters

When the user types a command in the sell, the command line is parsed by the //cmdline// framework
and injected in the command class. Previously the //args4j// framework was used but this framework does not support
natively code completion and could not be extended to support it. The support of command line completion is the
main motivation of the development of such a framework.

Let's study a simple class command example:

{{code}}
class date extends CRaSHCommand {
  @Usage("show the current time")
  @Command
  Object main(@Usage("the time format") @Option(names=["f","format"]) String format) {
    if (format == null)
      format = "EEE MMM d HH:mm:ss z yyyy";
    def date = new Date();
    return date.format(format);
  }
}{{/code}}

The command is pretty straightforward to understand:

* The ##@Command## annotation declares the ##main## method as a command
* The command takes one optional ##format## option
* The ##@Usage## annotation describes the usage of the command and its parameters

{{screen}}
% date
Thu Apr 19 15:44:05 CEST 2012
{{/screen}}

The ##@Usage## annotation is important because it will give a decent human description of the command

{{screen}}
% date -h
usage: date [-h | --help] [-f | --format]

   [-h | --help]   command usage
   [-f | --format] the time format
{{/screen}}

== Multi commands ==

A class can hold several commands allowing a single file to group several commands, let's study the JDBC command
structure:

{{code}}
@Usage("JDBC connection")
class jdbc extends CRaSHCommand {

  @Usage("connect to database with a JDBC connection string")
  @Command
  public String connect(
          @Usage("The username") @Option(names=["u","username"]) String user,
          @Usage("The password") @Option(names=["p","password"]) String password,
          @Usage("The extra properties") @Option(names=["properties"]) Value.Properties properties,
          @Usage("The connection string") @Argument String connectionString) {
     ...
  }

  @Usage("close the current connection")
  @Command
  public String close() {
     ...
  }
}
{{/code}}

We can see that the class declares two commands ##connect## and ##close##, they are invoked this way:

{{screen}}
% jdbc connect jdbc:derby:memory:EmbeddedDB;create=true
Connected to data base : jdbc:derby:memory:EmbeddedDB;create=true
% jdbc close
Connection closed
{{/screen}}

= Command context {{anchor id=command_context/}} =

During the execution of a command, CRaSH provides a //context// for
interacting with it : the property //context// is resolved to an instance of ##org.crsh.command.InvocationContext##,
the invocation context class extends
the ##org.crsh.command.CommandContext##. Let's have a look at those types:

{{example title="The command context"}}
{{java}}
{@javadoc org.crsh.command.CommandContext}
{@include org.crsh.command.CommandContext}
{{/java}}
{{/example}}

The ##CommandContext## provides access to the shell session as a ##Map<String, Object>##. Session attributes
can be accessed using this map, but they are also accessible as Groovy script properties. It means that writing such
code will be equivalent:

{{example title="Using shell session"}}
{{java}}
context.session["foo"] = "bar"; // <1> Bind the session attribute foo with the value bar
out.println(bar); // <2> The bar is resolved as an session attribute by Groovy
{{/java}}
{{/example}}

The ##CommandContext## provides also access to the shell attributes as a ##Map<String, Object>##. Context attributes
are useful to interact with object shared globally by the CRaSH environment:

* When embedded in a web application context, attributes resolves to servlet context attributes.
* When embedded in Spring context, attributes resolve to Spring objects:
** //attributes.factory// returns the Spring factory
** //attributes.beans// returns Spring beans, for example //attribute.beans.telnet// returns the //telnet// bean
* When attached to a virtual machine, the context attributes has only a single ##instrumentation## entry
 that is the ##java.lang.instrument.Instrumentation## instance obtained when attaching to a virtual machine.

{{example title="Obtaining a Spring bean"}}
{{java}}
def bean = context.attributes.beans.["TheBean"];
{{/java}}
{{/example}}

Now let's examine the ##InvocationContext## that extends the ##CommandContext##:

{{example title="The invocation context"}}
{{java}}
{@javadoc org.crsh.command.InvocationContext}
{@include org.crsh.command.InvocationContext}
{{/java}}
{{/example}}

The ##PrintWriter## object is the command output, it can be used also via the //out// property in Groovy scripts:

{{example title="Printing on the shell"}}
{{java}}
context.writer.print("Hello"); // <1> Printing using the context writer
out.print("hello"); // <2> Printing using the //out//
{{/java}}
{{/example}}

The ##readLine## method can be used to get interactive information from the user during the execution of a command.

{{example title="Reading on the console"}}
{{java}}
def age = context.readLine("How old are you?", false);
{{/java}}
{{/example}}

Finally the ##isPiped##, ##consume## and ##produce## methods are used when writing commands that exchange objects via
the pipe mechanism.

= Adding style =

CRaSH adds (since version 1.1) the support for colored text and text decoration. Each portion of text printed
 has three style attributes:

* //Decoration// : bold, underline or blink, as the ##org.crsh.text.Decoration## enum.
* //Foreground// color.
* //Background// color.

Available colors are grouped as the ##org.crsh.text.Color## enum: black, red, green, yellow, blue, magenta, cyan, white.

Decoration and colors can be applied with overloaded ##print## and ##println## methods provided by the ##ShellPrinterWriter##.
This printer is available as the implicit //out// attribute or thanks to the ##[[context>>#command_context]].getWriter()##
method.

{{example title="Decorating and coloring text"}}
{{java}}
out.println("hello", red); // <1> Print hello in red color
out.println("hello", red, blue); // <2> Print hello in red with a red blue
out.println("hello", underline, red, blue); // <3> Print hello in red underlined with a red blue
{{/java}}
{{/example}}

The combination of the decoration, background and foreground colors is a //style// represented by the ##org.crsh.text.Style##
object. Styles can be used like decoration and colors:

{{example title="Printing styled text"}}
{{java}}
out.println("hello", style(red)); // <1> Print hello in red color
out.println("hello", style(red, blue)); // <2> Print hello in red with a red blue
out.println("hello", style(underline, red, blue)); // <3> Print hello in red underlined with a red blue
{{/java}}
{{/example}}

When using the print methods, the style will be used for the currently printed object. It is possible to change the
style permanently (until it is reset) using Groovy //leftshift// operator : ##<<##

By default the ##<<## operator prints output on the console. The ##ShellPrintWriter## overrides the operator to work
with color, decoration and styles:

{{example title="Styling with the leftshift operator"}}
{{java}}
out << red // <1> Set red foreground color
out << underline // <2> Set underline
out << "hello" // <3> Print hello in underlined red
out << reset; // <4> Reset style
{{/java}}
{{/example}}

Operators can also be combined on the same line providing a more compact syntax:

{{java}}
out << red << underline << "hello" << reset
{{/java}}

{{java}}
out << style(underline, red, blue) << "hello" << reset
{{/java}}

{{note}}
Throughout the examples we have used decoration, color and styles. CRaSH automatically imports those classes so
they can be used out of the box in any CRaSH command without requiring prior import.
{{/note}}

= Inter command API =

In this section we study how a command can reuse existing commands. Here is an example

{{example title="dbscript.groovy"}}
{{code}}
jdbc.connect username:root, password:crash, "jdbc:derby:memory:EmbeddedDB;create=true"
jdbc.execute "create table derbyDB(num int, addr varchar(40))"
jdbc.execute "insert into derbyDB values (1956,'Webster St.')"
jdbc.execute "insert into derbyDB values (1910,'Union St.')"
jdbc.execute "select * from derbyDb"
jdbc.close
{{/code}}
{{/example}}

This script is written in Groovy and use Groovy DSL capabilities, let's study the first statement:

* the ##jdbc.connect## statement can be decomposed into two steps
** the ##jdbc## is resolved as the command itself
** the ##connect## invokes the connect command
* the ##username## and ##password## are considered as command options
* the SQL statement ##"jdbc:derby:memory:EmbeddedDB;create=true"## is the main argument of the command

It is equivalent to the shell command:

{{code}}
% jdbc connect --username root --password crash jdbc:derby:memory:EmbeddedDB;create=true
{{/code}}

The rest of the script is fairly easy to understand, here is the output of the script execution:

{{screen}}
% dbscript
Connected to data base : jdbc:derby:memory:EmbeddedDB;create=true
Query executed successfully
Query executed successfully
Query executed successfully
NUM                  ADDR
1956                 Webster St.
1910                 Union St.
Connection closed
{{/screen}}
